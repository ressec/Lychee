/*
 * Copyright(c) 2020 by Resse Christophe.
 * --------------------------------------------------------------------------------------
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * -------------------------------------------------------------------------------------
 */
package org.ressec.lychee.translation.test.base.request;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.ressec.avocado.core.junit.BaseUnitTest;
import org.ressec.lychee.translation.base.TranslationException;
import org.ressec.lychee.translation.base.operation.TranslationOperationTranslate;
import org.ressec.lychee.translation.base.operation.TranslationOperationType;
import org.ressec.lychee.translation.base.processor.ITranslationProcessor;
import org.ressec.lychee.translation.base.request.ITranslationRequest;
import org.ressec.lychee.translation.base.request.TranslationRequest;
import org.ressec.lychee.translation.engine.google.version.v1.GoogleTranslationProcessorVersion1;

import java.util.List;
import java.util.Locale;
import java.util.Optional;
import java.util.UUID;

/**
 * A class for unit testing the {@link TranslationRequest} entity.
 * @author <a href="mailto:christophe.resse@gmail.com">Christophe Resse</a>
 * @version 1.0.0
 */
@Tag("internal")
@Tag("translation")
@Tag("translation.request")
final class TestTranslationRequest extends BaseUnitTest
{
    /**
     * Test resource bundle property entry for name key.
     */
    private static final String TEXT_SOURCE = "Antarctica is Earth's southernmost continent. It contains the geographic " +
            "South Pole and is situated in the Antarctic region of the Southern Hemisphere, almost entirely south of " +
            "the Antarctic Circle, and is surrounded by the Southern Ocean.";

    @Test
    @DisplayName("Should create a translation request using a specific name")
    void shouldCreateRequestWithSpecificName()
    {
        TranslationRequest request = new TranslationRequest("request #1");

        Assertions.assertEquals("request #1", request.getName());
    }

    @Test
    @DisplayName("Should create a translation request with an auto generated name")
    void shouldCreateRequestWithAutoGeneratedName()
    {
        TranslationRequest request = new TranslationRequest();

        Assertions.assertNotNull(request.getName());
    }

    @Test
    @DisplayName("Should add a property to a translation request")
    void shouldAddProperty()
    {
        TranslationRequest request = new TranslationRequest();

        request.addProperty("unit", "1 Alpha2"); // Only string values at this time!

        Assertions.assertEquals(1, request.getPropertyCount());
    }

    @Test
    @DisplayName("Should retrieve a property given its name from a translation request")
    void shouldRetrieveProperty()
    {
        final String PROPERTY_NAME = "unit";
        final String PROPERTY_VALUE = "1 Alpha2";

        TranslationRequest request = new TranslationRequest();

        request.addProperty(PROPERTY_NAME, PROPERTY_VALUE);

        Assertions.assertEquals(PROPERTY_VALUE, request.getProperty(PROPERTY_NAME));
    }

    @Test
    @DisplayName("Should check a property exist for a translation request")
    void shouldCheckPropertyExist()
    {
        final String PROPERTY_NAME = "unit";
        final String PROPERTY_VALUE = "1 Alpha2";

        TranslationRequest request = new TranslationRequest();

        request.addProperty(PROPERTY_NAME, PROPERTY_VALUE);

        Assertions.assertTrue(request.existProperty(PROPERTY_NAME));
    }

    @Test
    @DisplayName("Should remove a property for a translation request")
    void shouldRemovePropertyByName()
    {
        final String PROPERTY_NAME = "unit";
        final String PROPERTY_VALUE = "1 Alpha2";

        TranslationRequest request = new TranslationRequest();

        request.addProperty(PROPERTY_NAME, PROPERTY_VALUE);

        Assertions.assertTrue(request.existProperty(PROPERTY_NAME));

        request.removeProperty(PROPERTY_NAME);

        Assertions.assertEquals(0, request.getPropertyCount());
    }

    @Test
    @DisplayName("Should clear all properties of a translation request")
    void shouldClearAllProperties()
    {
        TranslationRequest request = new TranslationRequest();

        for (int i = 0; i < 10 ; i++)
        {
            request.addProperty(UUID.randomUUID().toString(), String.valueOf(i));
        }

        Assertions.assertEquals(10, request.getPropertyCount());
        request.clearProperties();
        Assertions.assertEquals(0, request.getPropertyCount());
    }

    @Test
    @DisplayName("Should add translation operation")
    void shouldAddTranslationOperation()
    {
        TranslationRequest request = new TranslationRequest();

        request.addOperation(TranslationOperationTranslate.builder()
                .withText(TEXT_SOURCE)
                .withSourceLanguage(Locale.ENGLISH)
                .withTargetLanguage(Locale.FRENCH)
                .build());

        Assertions.assertEquals(1, request.getOperationCount());
    }

    @Test
    @DisplayName("Should remove translation operation")
    void shouldRemoveTranslationOperation()
    {
        TranslationRequest request = new TranslationRequest();

        request.addOperation(TranslationOperationTranslate.builder()
                .withText(TEXT_SOURCE)
                .withSourceLanguage(Locale.ENGLISH)
                .withTargetLanguage(Locale.FRENCH)
                .build());

        Assertions.assertEquals(1, request.getOperationCount());
        Assertions.assertEquals(1, request.getOperationCount(TranslationOperationType.TRANSLATE));
        Assertions.assertEquals(0, request.getOperationCount(TranslationOperationType.DETECT));
    }

    @Test
    @DisplayName("Should process translation operation")
    void shouldProcessTranslationOperation() throws TranslationException
    {
        TranslationRequest request = new TranslationRequest();

        request.addOperation(TranslationOperationTranslate.builder()
                .withText(TEXT_SOURCE)
                .withSourceLanguage(Locale.ENGLISH)
                .withTargetLanguage(Locale.FRENCH)
                .build());

        ITranslationProcessor processor = GoogleTranslationProcessorVersion1.builder()
                .withRequest(request)
                .build();

        processor.execute();

        // Check at least one request (with one operation) has been processed.
        List<ITranslationRequest> requests = processor.getRequests();
        Assertions.assertEquals(1, requests.size());

        Optional<ITranslationRequest> result = processor.getRequest(request.getName());
        Assertions.assertTrue(result.isPresent());

        ITranslationRequest processed = result.get();
        Assertions.assertNotNull(processed);
        Assertions.assertNotEquals(0, processed.getAverageConfidence());
        Assertions.assertNotEquals(0, processed.getAverageExecutionTime());
    }
}